#!/usr/bin/env bash
#
# DESCRIPTION
#   Clone all GitLab repositories for a given group.
#
#   There are several ways you can authenticate with the GitLab API. The
#   easiest way is to create a GitLab access token (Settings > Access Tokens >
#   Create personal access token).
#
#   You can use access tokens to authenticate with the API by passing it in
#   either the private_token parameter or the PRIVATE-TOKEN header.
#
#   You can also use personal or project access tokens with OAuth-compliant
#   headers ("Authorization: Bearer <access-token>").
#
#   The access token can be passed via a command-line argument or set via the
#   environment variable GITLAB_API_TOKEN.
#
#   NOTE: This script is specific to Granular.
#
# USAGE
#   git-clone-gl [OPTIONS] GROUP [TOKEN]
#
# ARGUMENTS
#   GROUP    GitLab group
#   TOKEN    GitLab personal access token (can also be set via GITLAB_API_TOKEN)
#
# OPTIONS
#   -h, --help    Show this help message
#
# EXAMPLES
#   git-clone-gl Group xxxxxxxxxx

# Colors
red='\033[0;31m'
reset='\033[0m'

# Print usage information.
function usage() {
  echo "usage: $0 [OPTIONS] GROUP [TOKEN]"
  echo ""
  echo "Arguments:"
  echo "  GROUP    GitLab group"
  echo "  TOKEN    GitLab personal access token"
  echo ""
  echo "Options:"
  echo "  -h, --help    Show this help message"
  echo ""
}

group=""
access_token=""

# Parse command line arguments.
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help) usage; exit 0 ;;
    -*) echo "Unknown option: $1" >&2; usage; exit 1 ;;
    *)
      if [ -z "${group}" ]; then
        group="$1"
      elif [ -z "${access_token}" ]; then
        access_token="$1"
      else
        echo "Too many arguments: $1" >&2; usage; exit 1
      fi
      shift ;;
  esac
done

if [ -z "${group}" ]; then
  echo -e "${red}ERROR: Must specify a group.${reset}" >&2
  usage
  exit 1
fi

# If no access token provided as argument, check environment variable
if [ -z "${access_token}" ]; then
  access_token="${GITLAB_API_TOKEN}"
fi

if [ -z "${access_token}" ]; then
  echo -e "${red}ERROR: Must specify a GitLab access token.${reset}" >&2
  usage
  exit 1
fi

eval $(ssh-agent -s) >/dev/null 2>&1 && \
  ssh-add ~/.ssh/id_rsa >/dev/null 2>&1

ssh git@gitlab.internal.granular.ag >/dev/null 2>&1

if [ $? -eq 255 ]; then
  echo -e "${red}ERROR: Permission denied (publickey).${reset}" >&2
  exit 1
fi

# Encode URL (convert '\' to '%2f')
group=$(echo "${group}" | sed "s/\//%2f/")

# The GitLab API returns a maximum of 100 results per page. Therefore, we
# increment page until no results are returned.
page=1
ssh_urls=()
while true; do
  urls=($(curl -L --silent -X GET \
    --header "Authorization: Bearer ${access_token}" \
    "https://gitlab.internal.granular.ag/api/v4/groups/${group}/projects?per_page=100&page=${page}&order_by=name&with_shared=false" \
    | jq '.[].ssh_url_to_repo' \
    | tr -d \"))

  if [ ${#urls[@]} -eq 0 ]; then
    break
  else
    ssh_urls+=("${urls[@]}")
  fi
  (( page=page+1 ))
done

for ssh_url in "${ssh_urls[@]}"; do

  echo Cloning "${ssh_url}"...

  output=$(git clone "${ssh_url}" 2>&1)

  if [ $(echo "${output}" | grep -i "already exists" -c) -ne 0 ]; then
    echo -e "${red}Repository already exists.${reset}"
  fi

done

# Clean up ssh-agent
ssh-agent -k >/dev/null 2>&1
