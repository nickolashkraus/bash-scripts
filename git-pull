#!/usr/bin/env bash
#
# DESCRIPTION
#   Pull all Git repositories within a given directory.
#
# USAGE
#   git-pull [OPTIONS]
#
# ARGUMENTS
#   None
#
# OPTIONS
#   -m, --master           Whether to checkout master or main before pulling
#   -i, --identity-file    File for the identity (private key) for public key authentication
#                          (optional, defaults to id_rsa)
#   -d, --directory DIR    Directory to use (optional, defaults to current directory)
#   -h, --help             Show this help message
#
# EXAMPLES
#   git-pull
#   git-pull -i id_rsa_workiva

# Colors
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
reset='\033[0m'

# Print usage information.
function usage() {
  echo "usage: $0 [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  -m, --master           Whether to checkout master or main before pulling"
  echo "  -i, --identity-file    File for the identity (private key) for public key authentication"
  echo "                         (optional, defaults to id_rsa)"
  echo "  -d, --directory DIR    Directory to use (optional, defaults to current directory)"
  echo "  -h, --help             Show this help message"
  echo ""
}

master=false
identity_file="id_rsa"
dir=""

# Parse command line arguments.
while [[ $# -gt 0 ]]; do
  case $1 in
    -m|--master) master=true; shift ;;
    -i|--identity-file) identity_file="$2"; shift 2 ;;
    -d|--directory) dir="$2"; shift 2 ;;
    -h|--help) usage; exit 0 ;;
    -*) echo "Unknown option: $1" >&2; usage; exit 1 ;;
    *) echo "Unknown argument: $1" >&2; usage; exit 1 ;;
  esac
done

if [ -z "${dir}" ]; then
  dir="$(pwd)"
else
  if [ ! -e "${dir}" ]; then
    echo -e "${red}ERROR: ${dir} does not exist.${reset}" >&2
    exit 1
  fi
fi

eval "$(ssh-agent -s)" >/dev/null 2>&1 && \
  ssh-add "${HOME}/.ssh/${identity_file}" >/dev/null 2>&1

for d in "${dir}"/*; do

  [ -d "${d}" ] || continue

  basename "${d}"

  if [ ! -d "${d}/.git" ]; then
    echo -e "${red}$(basename "${d}") is not a Git repository.${reset}"
    continue
  fi

  pushd "${d}" >/dev/null || exit

  if [ "${master}" == true ]; then
    output=$(git checkout master 2>&1)
    if [ $? -ne 0 ]; then
      echo -e "${red}Branch 'master' does not exist.${reset}"
      output=$(git checkout main 2>&1)
      if [ $? -ne 0 ]; then
        echo -e "${red}Branch 'main' does not exist.${reset}"
        continue
      else
        output=$(git branch --set-upstream-to=origin/main main 2>&1)
        if [[ "${output}" =~ error ]]; then
          echo -e "${red}The requested upstream branch 'origin/main' does not exist.${reset}"
          continue
        fi
      fi
    else
        output=$(git branch --set-upstream-to=origin/master master 2>&1)
        if [[ "${output}" =~ error ]]; then
          echo -e "${red}The requested upstream branch 'origin/master' does not exist.${reset}"
          continue
        fi
    fi
  fi

  output=$(git pull 2>&1)

  # Already up to date.
  if [[ "${output}" =~ Already[[:space:]]up[[:space:]]to[[:space:]]date\. ]]; then
    echo -e "${green}Already up to date.${reset}"
  # Successfully rebased and updated
  elif [[ "${output}" =~ Successfully[[:space:]]rebased[[:space:]]and[[:space:]]updated ]]; then
    echo -e "${green}Successfully rebased and updated${reset}"
  # There is no tracking information for the current branch.
  elif [[ "${output}" =~ There[[:space:]]is[[:space:]]no[[:space:]]tracking[[:space:]]information[[:space:]]for[[:space:]]the[[:space:]]current[[:space:]]branch. ]]; then
    echo -e "${yellow}There is no tracking information for the current branch."
    git branch | grep "\*"
    echo -e "${reset}"
  # Updating abc1234..def5678
  elif [[ "${output}" =~ Updating[[:space:]][a-f0-9]+\.\.[a-f0-9]+ ]]; then
    echo -e "${yellow}Updating"
    echo "${output}"
    echo -e "${reset}"
  else
    echo -e "${red}Error"
    echo "${output}"
    echo -e "${reset}"
  fi

  popd >/dev/null || exit

done
