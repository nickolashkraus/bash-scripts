#!/bin/bash
#
# DESCRIPTION
# Pull all Git repositories within a given directory.
#
# USAGE
#
#   git-pull [-m, --master] [-i identity_file] [directory]

# TODO: Add option to write output to log file.

function usage {
  echo 'usage: git-pull [-m, --master] [-i identity_file] [directory]'
  echo ''
  echo '  Arguments:'
  echo '    directory: Directory to use (defaults to current directory)'
  echo ''
  echo '  Options:'
  echo "    -m, --master: Whether to checkout master or main before executing \`git pull\`"
  echo "    -i, --identity-file: File from which the identity (private key) for public key authentication is read."
}

args=("$@")

count=0
for arg in "${args[@]}"; do
  if [[ "${arg}" =~ ^\-.*|^\-\-.* ]]; then
    if [[ "${arg}" =~ ^\-m$|^\-\-master$ ]]; then
      master='true'
    elif [[ "${arg}" =~ ^\-i$|^\-\-identity\-file$ ]]; then
      identity_file="${args[count+1]}"
    else
      echo -en "\033[0;31m"
      echo "${arg} is not a valid option."
      echo -en "\033[0m\n"
      usage
      exit 1
    fi
  fi
  count=$((count+1))
done

# If there is an odd number of command-line arguments, the last argument is the
# directory.
if [ $(($# % 2)) == 1 ]; then
  dir="${args[$#-1]}"
fi

if [ -z "${dir}" ]; then
  dir="$(pwd)"
else
  if [ ! -e "${dir}" ]; then
    echo -en "\033[0;31m"
    echo "${dir} does not exist."
    echo -en "\033[0m\n"
    exit 1
  fi
fi

eval "$(ssh-agent -s)" >/dev/null 2>&1 && \
  ssh-add "${HOME}/.ssh/${identity_file}" >/dev/null 2>&1

for d in "${dir}"/*; do

  [ -d "${d}" ] || continue

  basename "${d}"

  if [ ! -d "${d}/.git" ]; then
    echo -en "\033[0;31m"
    echo "$(basename "${d}") is not a Git repository."
    echo -en "\033[0m"
    continue
  fi

  pushd "${d}" >/dev/null || exit

  if [ "${master}" == 'true' ]; then
    output=$(git checkout master 2>&1)
    if [ $? -ne 0 ]; then
      echo -en "\033[0;31m" # display red
      echo "Branch 'master' does not exist."
      echo -en "\033[0m"
      output=$(git checkout main 2>&1)
      if [ $? -ne 0 ]; then
        echo -en "\033[0;31m" # display red
        echo "Branch 'main' does not exist."
        echo -en "\033[0m"
        continue
      else
        output=$(git branch --set-upstream-to=origin/main main 2>&1)
        if [[ "${output}" =~ error ]]; then
          echo -en "\033[0;31m" # display red
          echo "The requested upstream branch 'origin/main' does not exist."
          echo -en "\033[0m"
          continue
        fi
      fi
    else
        output=$(git branch --set-upstream-to=origin/master master 2>&1)
        if [[ "${output}" =~ error ]]; then
          echo -en "\033[0;31m" # display red
          echo "The requested upstream branch 'origin/main' does not exist."
          echo -en "\033[0m"
          continue
        fi
    fi
  fi

  output=$(git pull 2>&1)

  # TODO: Expand the list of cases as they arise.

  # Already up to date.
  if [[ "${output}" =~ Already[[:space:]]up[[:space:]]to[[:space:]]date\. ]]; then
    echo -en "\033[0;32m" # display green
    echo "Already up to date."
    echo -en "\033[0m"
  # Successfully rebased and updated
  elif [[ "${output}" =~ Successfully[[:space:]]rebased[[:space:]]and[[:space:]]updated ]]; then
    echo -en "\033[0;32m" # display green
    echo "Successfully rebased and updated"
    echo -en "\033[0m"
  # There is no tracking information for the current branch.
  elif [[ "${output}" =~ There[[:space:]]is[[:space:]]no[[:space:]]tracking[[:space:]]information[[:space:]]for[[:space:]]the[[:space:]]current[[:space:]]branch. ]]; then
    echo -en "\033[0;33m" # display yellow
    echo "There is no tracking information for the current branch."
    git branch | grep "\*"
    echo -en "\033[0m"
  # Updating abc1234..def5678
  elif [[ "${output}" =~ Updating[[:space:]][a-f0-9]{7}\.\.[a-f0-9]{7} ]]; then
    echo -en "\033[0;33m" # display yellow
    echo "Updating"
    echo "${output}"
    echo -en "\033[0m"
  else
    echo -en "\033[0;31m" # display red
    echo "Error"
    echo "${output}"
    echo -en "\033[0m"
  fi

  popd >/dev/null || exit

done
