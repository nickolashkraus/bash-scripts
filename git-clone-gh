#!/usr/bin/env bash
#
# DESCRIPTION
#   Clone all GitHub repositories for a given user or organization.
#
#   GitHub recommends you use OAuth tokens to authenticate to the GitHub API.
#   OAuth tokens include personal access tokens and enable the user to revoke
#   access at any time.
#
#   NOTE: If resources are protected by organization SAML enforcement, you must
#   grant your personal access token access to this organization.
#
#     * Personal access tokens > Configure SSO > Authorize
#
#   SEE ALSO:
#     * https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
#
# USAGE
#   git-clone-gh [OPTIONS] [TOKEN]
#
# ARGUMENTS
#   TOKEN    GitHub personal access token
#
# OPTIONS
#   -u, --user             User's repositories to clone
#   -o, --org              Organization's repositories to clone
#   -i, --identity-file    File for the identity (private key) for public key authentication
#                          (optional, defaults to id_rsa)
#   -s, --skip-archived    Whether to skip archived repositories
#
# EXAMPLES
#   git-clone-gh -u nickolashkraus ghp_xxx
#   git-clone-gh -o Workiva ghp_xxx --skip-archived

# Print usage information
function usage() {
  echo "usage: $0 [OPTIONS] [TOKEN]"
  echo ""
  echo "Arguments:"
  echo "  TOKEN    GitHub personal access token"
  echo ""
  echo "Options:"
  echo "  -u, --user             User's repositories to clone"
  echo "  -o, --org              Organization's repositories to clone"
  echo "  -i, --identity-file    File for the identity (private key) for public key authentication"
  echo "                         (optional, defaults to id_rsa)"
  echo "  -s, --skip-archived    Whether to skip archived repositories"
  echo ""
}

args=("$@")

count=0
for arg in "${args[@]}"; do
  if [[ "${arg}" =~ ^\-.*|^\-\-.* ]]; then
    if [[ "${arg}" =~ ^\-u$|^\-\-user$ ]]; then
      user="${args[count+1]}"
    elif [[ "${arg}" =~ ^\-o$|^\-\-org$ ]]; then
      org="${args[count+1]}"
    elif [[ "${arg}" =~ ^\-i$|^\-\-identity\-file$ ]]; then
      identity_file="${args[count+1]}"
    else
      echo -en "\033[0;31m"
      echo "${arg} is not a valid option."
      echo -en "\033[0m\n"
      usage
      exit 1
    fi
  fi
  count=$((count+1))
done

# Error if 'user' and 'org' are either both set or not set.
if { [ -n "${user}" ] && [ -n "${org}" ]; } || { [ -z "${user}" ] && [ -z "${org}" ]; }; then
  echo -en "\033[0;31m"
  echo "ERROR: Specify either a user or organization."
  echo -en "\033[0m\n"
  usage
  exit 1
fi

# Check if 'identity_file' is set. If not, default to id_rsa.
if [ -z "${identity_file}" ]; then
  identity_file='id_rsa'
fi

# If there is an odd number of command-line arguments, the last argument is the
# GitHub access token.
if [ $(($# % 2)) == 1 ]; then
  access_token="${args[$#-1]}"
else
  # Check if the access token is set via the environment variable.
  access_token="${GITHUB_API_TOKEN}"
fi

if [ -z "${access_token}" ]; then
  echo -en "\033[0;31m"
  echo "ERROR: Specify a GitHub access token."
  echo -en "\033[0m\n"
  usage
  exit 1
fi

eval "$(ssh-agent -s)" >/dev/null 2>&1 && \
  ssh-add "${HOME}/.ssh/${identity_file}" >/dev/null 2>&1

trap 'ssh git@github.com >/dev/null 2>&1 || EXIT=$?' ERR

if [ "${EXIT}" == "255" ]; then
  echo -en "\033[0;31m"
  echo "Permission denied (publickey)."
  echo -en "\033[0m"
  exit 1
fi

# Set RESOURCE and check if GitHub user/organization exists.
if [ -n "${user}" ]; then
  RESOURCE="users/${user}/repos"
  if ! curl --fail --silent "https://api.github.com/users/${user}" >/dev/null ; then
    echo -en "\033[0;31m"
    echo "ERROR: GitHub user does not exist."
    echo -en "\033[0m\n"
    exit 1
  fi
elif [ -n "${org}" ]; then
  RESOURCE="orgs/${org}/repos"
  if ! curl --fail --silent "https://api.github.com/orgs/${org}" >/dev/null; then
    echo -en "\033[0;31m"
    echo "ERROR: GitHub organization does not exist."
    echo -en "\033[0m\n"
    exit 1
  fi
else
  exit 1
fi

# The GitHub API only returns 30 results. Therefore, increment PAGE until no
# results are returned.
PAGE=1
SSH_URLS=()
while true; do
  urls=($(curl -L --silent -X GET \
    --header "Authorization: Token ${access_token}" \
    "https://api.github.com/${RESOURCE}?sort=full_name&page=${PAGE}" | jq '.[].ssh_url' | tr -d \"))
  if [ ${#urls[@]} -eq 0 ]; then
    break
  else
    SSH_URLS+=("${urls[@]}")
  fi
  (( PAGE=PAGE+1 ))
done

for ssh_url in "${SSH_URLS[@]}"; do

  echo Cloning "${ssh_url}"...

  output=$(git clone "${ssh_url}" 2>&1)

  if [[ "${output}" =~ 'already exists' ]]; then
    echo -en "\033[0;31m"
    echo "Repository already exists."
    echo -en "\033[0m"
  elif [[ "${output}" =~ 'not found' ]]; then
    echo -en "\033[0;31m"
    echo "Please make sure you have the correct access rights and the repository exists."
    echo -en "\033[0m"
  elif [[ "${output}" =~ 'SAML' ]]; then
    echo -en "\033[0;31m"
    echo "ERROR: The '${org}' organization has enabled or enforced SAML SSO"
    echo -en "\033[0m"
  fi

done

# Clean up ssh-agent
ssh-agent -k >/dev/null 2>&1
