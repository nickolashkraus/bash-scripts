#!/usr/bin/env bash
#
# DESCRIPTION
#   Clone all GitHub repositories for a given user or organization.
#
#   GitHub recommends you use OAuth tokens to authenticate to the GitHub API.
#   OAuth tokens include personal access tokens and enable the user to revoke
#   access at any time.
#
#   NOTE: If resources are protected by organization SAML enforcement, you must
#   grant your personal access token access to this organization.
#
#     * Personal access tokens > Configure SSO > Authorize
#
#   SEE ALSO:
#     * https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
#
# USAGE
#   git-clone-gh [OPTIONS] [TOKEN]
#
# ARGUMENTS
#   TOKEN    GitHub personal access token (can also be set via GITHUB_API_TOKEN)
#
# OPTIONS
#   -u, --user             User's repositories to clone
#   -o, --org              Organization's repositories to clone
#   -i, --identity-file    File for the identity (private key) for public key authentication
#                          (optional, defaults to id_rsa)
#   -s, --skip-archived    Whether to skip archived repositories
#   -h, --help             Show this help message
#
# EXAMPLES
#   git-clone-gh -u nickolashkraus ghp_xxx
#   git-clone-gh -o Workiva ghp_xxx --skip-archived

# Colors
red='\033[0;31m'
reset='\033[0m'

# Print usage information.
function usage() {
  echo "usage: git-clone-gh [OPTIONS] [TOKEN]"
  echo ""
  echo "Arguments:"
  echo "  TOKEN    GitHub personal access token"
  echo ""
  echo "Options:"
  echo "  -u, --user             User's repositories to clone"
  echo "  -o, --org              Organization's repositories to clone"
  echo "  -i, --identity-file    File for the identity (private key) for public key authentication"
  echo "                         (optional, defaults to id_rsa)"
  echo "  -s, --skip-archived    Whether to skip archived repositories"
  echo "  -h, --help             Show this help message"
  echo ""
}

user=""
org=""
identity_file="id_rsa"
skip_archived=false
access_token=""

# Parse command line arguments.
while [[ $# -gt 0 ]]; do
  case $1 in
    -u | --user)
      user=$2
      shift 2
      ;;
    -o | --org)
      org=$2
      shift 2
      ;;
    -i | --identity-file)
      identity_file=$2
      shift 2
      ;;
    -s | --skip-archived)
      skip_archived=true
      shift
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    -*)
      echo "Unknown option: $1" >&2
      usage
      exit 1
      ;;
    *)
      access_token="$1"
      shift
      break
      ;;
  esac
done

# Error if 'user' and 'org' are either both set or not set.
if { [ -n "${user}" ] && [ -n "${org}" ]; } || { [ -z "${user}" ] && [ -z "${org}" ]; }; then
  echo -e "${red}ERROR: Specify either a user or organization.${reset}" >&2
  usage
  exit 1
fi

# If no access token provided as argument, check environment variable.
if [ -z "${access_token}" ]; then
  access_token="${GITHUB_API_TOKEN}"
fi

if [ -z "${access_token}" ]; then
  echo -e "${red}ERROR: Specify a GitHub access token.${reset}" >&2
  usage
  exit 1
fi

eval "$(ssh-agent -s)" >/dev/null 2>&1 &&
  ssh-add "${HOME}/.ssh/${identity_file}" >/dev/null 2>&1

# Test SSH connection to GitHub.
# ssh_output=$(ssh -T git@github.com 2>&1)
# if [[ ! "$ssh_output" =~ "successfully authenticated" ]]; then
#   echo -e "${red}ERROR: GitHub SSH authentication failed.${reset}" >&2
#   echo "$ssh_output" >&2
#   exit 1
# fi

# Set resource and check if GitHub user/organization exists.
if [ -n "${user}" ]; then
  resource="users/${user}/repos"
  if ! curl --fail --silent "https://api.github.com/users/${user}" >/dev/null; then
    echo -e "${red}ERROR: GitHub user does not exist.${reset}" >&2
    exit 1
  fi
elif [ -n "${org}" ]; then
  resource="orgs/${org}/repos"
  if ! curl --fail --silent "https://api.github.com/orgs/${org}" >/dev/null; then
    echo -e "${red}ERROR: GitHub organization does not exist.${reset}" >&2
    exit 1
  fi
else
  exit 1
fi

# Build jq filter based on --skip-archived option.
if [ "${skip_archived}" == true ]; then
  jq_filter='.[] | select(.archived == false) | .ssh_url'
else
  jq_filter='.[].ssh_url'
fi

# The GitHub API only returns 30 results. Therefore, increment page until no
# results are returned.
page=1
ssh_urls=()
while true; do
  mapfile -t urls <<EOF_URLS
$(curl -L --silent -X GET \
    --header "Authorization: Token ${access_token}" \
    "https://api.github.com/${resource}?sort=full_name&page=${page}" |
    jq -r "${jq_filter}")
EOF_URLS
  # Check if the array is empty or contains only an empty string.
  if [ ${#urls[@]} -eq 0 ] || [ -z "${urls[0]}" ]; then
    break
  fi
  ssh_urls+=("${urls[@]}")
  ((page++))
done

for ssh_url in "${ssh_urls[@]}"; do
  echo Cloning "${ssh_url}"...
  output=$(git clone "${ssh_url}" 2>&1)
  if echo "${output}" | grep -qi "already exists"; then
    echo -e "${red}Repository already exists.${reset}"
  elif echo "${output}" | grep -qi "not found"; then
    echo -e "${red}Please make sure you have the correct access rights and the repository exists.${reset}"
  elif echo "${output}" | grep -qi "SAML"; then
    echo -e "${red}ERROR: The '${org}' organization has enabled or enforced SAML SSO${reset}" >&2
  fi
done

# Clean up ssh-agent.
ssh-agent -k >/dev/null 2>&1
