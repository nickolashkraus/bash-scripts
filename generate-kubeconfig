#!/usr/bin/env bash
#
# DESCRIPTION
#   Generate a kubeconfig file for all EKS clusters.
#
#   NOTE: This script is specific to Workiva.
#
# USAGE
#   generate-kubeconfig [OPTIONS]
#
# ARGUMENTS
#   None
#
# OPTIONS
#   -o, --output FILE    Path to the output file
#   --use-pem-file       Output private key of certificate authority to PEM formatted file
#   --use-aws-cli        Use AWS CLI (instead of aws-iam-authenticator) for cluster authentication
#   -h, --help           Show this help message
#
# EXAMPLES
#   generate-kubeconfig --output ~/.kube/workiva.yaml --use-pem-file --use-aws-cli

# Colors
red='\033[0;31m'
reset='\033[0m'

# Print usage information.
function usage() {
  echo "usage: $0 [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  -o, --output FILE    Path to the output file"
  echo "  --use-pem-file       Output private key of certificate authority to PEM formatted file"
  echo "  --use-aws-cli        Use AWS CLI (instead of aws-iam-authenticator) for cluster authentication"
  echo "  -h, --help           Show this help message"
  echo ""
}

output_file=""
use_pem_file=false
use_aws_cli=false

# Parse command line arguments.
while [[ $# -gt 0 ]]; do
  case $1 in
    -o|--output) output_file="$2"; shift 2 ;;
    --use-pem-file) use_pem_file=true; shift ;;
    --use-aws-cli) use_aws_cli=true; shift ;;
    -h|--help) usage; exit 0 ;;
    -*) echo "Unknown option: $1" >&2; usage; exit 1 ;;
    *) echo "Unknown argument: $1" >&2; usage; exit 1 ;;
  esac
done

# Check if 'output_file' is set. If not, exit with non-zero error code.
if [ -z "${output_file}" ]; then
  echo -e "${red}ERROR: Specify an output file (ex. ~/.kube/workiva.yaml).${reset}" >&2
  usage
  exit 1
fi

if ! [ -x "$(command -v aws)"  ]; then
  echo -e "${red}ERROR: AWS CLI is not installed.${reset}" >&2
  usage
  exit 1
fi


cat <<EOT > "${output_file}"
###############################################################################
# /!\\ WARNING /!\\
# File generated by generate-kubeconfig. DO NOT EDIT.
#
#   \`\`\`
#   $ generate-kubeconfig $@
#   \`\`\`
#
# Workiva kubeconfig file
#
# See: https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig
#
# Workiva has 18 EKS clusters in the following AWS accounts:
#   * Corp: 138996711548
#     └── us-east-1
#         └── eks-inf-tools
#   * Prod: 806289232271
#     ├── ap-northeast-1
#     │   └── eks-prod-apac
#     ├── eu-west-1
#     │   └── eks-prod-eu
#     └── us-east-1
#         ├── eks-sandbox
#         ├── eks-demo
#         ├── eks-dma-prod
#         ├── eks-pentest
#         ├── eks-plat
#         └── eks-prod
#   * Dev: 663511558366
#     ├── us-east-1
#     │   ├── eks-staging
#     │   ├── eks-wk-dev
#     │   └── eks-wk-dev-dma
#     └── us-west-2
#         ├── eks-cowboy
#         ├── eks-inf-dev
#         ├── eks-plat-dev
#         ├── eks-squad1
#         └── eks-squad2
#   * ML: 399354974417
#     └── us-east-1
#         └── eks-dma-ml-east
###############################################################################
apiVersion: v1
kind: Config
preferences: {}

EOT

CLUSTERS=(
  workiva.corp:us-east-1:eks-inf-tools
  workiva.prod:ap-northeast-1:eks-prod-apac
  workiva.prod:eu-west-1:eks-prod-eu
  workiva.prod:us-east-1:eks-demo
  workiva.prod:us-east-1:eks-dma-prod
  workiva.prod:us-east-1:eks-pentest
  workiva.prod:us-east-1:eks-plat
  workiva.prod:us-east-1:eks-prod
  workiva.prod:us-east-1:eks-sandbox
  workiva.dev:us-east-1:eks-staging
  workiva.dev:us-east-1:eks-wk-dev
  workiva.dev:us-east-1:eks-wk-dev-dma
  workiva.dev:us-west-2:eks-cowboy
  workiva.dev:us-west-2:eks-inf-dev
  workiva.dev:us-west-2:eks-plat-dev
  workiva.dev:us-west-2:eks-squad1
  workiva.dev:us-west-2:eks-squad2
)

cat <<EOT >> "${output_file}"
clusters:
EOT

for i in "${CLUSTERS[@]}"; do
  IFS=':' read -ra ARRAY <<< "${i}"
  profile="${ARRAY[0]}"
  region="${ARRAY[1]}"
  name="${ARRAY[2]}"
  output=$(aws --profile "${profile}" --region "${region}" \
    eks describe-cluster --name "${name}")
      endpoint=$(jq '.cluster.endpoint' <<< "${output}" | tr -d \")
      ca_data=$(jq '.cluster.certificateAuthority.data' <<< "${output}" | tr -d \")
      if [ "${use_pem_file}" == 'true' ]; then
        # Create PEM file from certificate authority data
        mkdir -p "${HOME}/.kube/certs/${name}"
        echo -n "${ca_data}" | base64 --decode > "${HOME}/.kube/certs/${name}/ca.crt"
        line="    certificate-authority: ${HOME}/.kube/certs/${name}/ca.crt"
      else
        line="    certificate-authority-data: ${ca_data}"
      fi
      cat <<EOT >> "${output_file}"
  - cluster:
  ${line}
      server: ${endpoint}
    name: ${name}
EOT
printf '.'
done
echo ''

cat <<EOT >> "${output_file}"
contexts:
EOT

for i in "${CLUSTERS[@]}"; do
  IFS=':' read -ra ARRAY <<< "${i}"
  name="${ARRAY[2]}"
  cat <<EOT >> "${output_file}"
  - context:
      cluster: ${name}
      namespace: workiva
      user: ${name}
    name: ${name}
EOT
done

cat <<EOT >> "${output_file}"
users:
EOT

for i in "${CLUSTERS[@]}"; do
  IFS=':' read -ra ARRAY <<< "${i}"
  profile="${ARRAY[0]}"
  region="${ARRAY[1]}"
  name="${ARRAY[2]}"
  if [ "${use_aws_cli}" == 'true' ]; then
    cat <<EOT >> "${output_file}"
  - name: ${name}
    user:
      exec:
        apiVersion: client.authentication.k8s.io/v1beta1
        command: aws
        args:
          - --profile
          - ${profile}
          - --region
          - ${region}
          - eks
          - get-token
          - --cluster-name
          - ${name}
EOT
  else
    cat <<EOT >> "${output_file}"
  - name: ${name}
    user:
      exec:
        apiVersion: client.authentication.k8s.io/v1beta1
        command: aws-iam-authenticator
        args:
          - token
          - -i
          - ${name}
        env: null
        provideClusterInfo: false
EOT
  fi
done
