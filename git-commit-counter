#!/usr/bin/env bash
#
# DESCRIPTION
#   Scan all Git repositories in a directory and count how many commits have
#   been made by a given user. Allows excluding specific directories.
#
# USAGE
#   git-commit-counter [OPTIONS]
#
# ARGUMENTS
#   None
#
# OPTIONS
#  -u, --user USER          Git user email (optional, defaults to current user email)
#  -d, --directory DIR      Directory to scan (optional, defaults to current directory)
#  -n, --top-n NUM          Display the top N most active repositories (optional, defaults to 10)
#  -e, --exclude PATTERN    Add a pattern to exclude (can be used multiple times)
#  -q, --quiet              Display only summary information
#  -h, --help               Display this help message
#
# EXAMPLES
#   git-commit-counter --user 0x@nickolaskraus.io -n 100

user=""       # Commit author email. Defaults to the email set via global options.
scan_dir="."  # Directory to scan. Defaults to the current directory.
top_n=10      # Top N most active repositories. Defaults to 10.
verbose=true  # Set to false to only show summary results.

# Directories to exclude (add patterns you want to exclude)
# Each line is a pattern that will be passed to grep -v
# Example exclusions:
#   ".terraform/modules"   # Exclude Terraform modules
#   "node_modules"         # Exclude Node.js modules
#   "vendor/"              # Exclude vendor directories
exclude_patterns=(
  ".terraform/modules"
  "node_modules"
  "vendor/"
  # Add more patterns here...
)

# Colors
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
reset='\033[0m'

# Print usage information
function usage() {
  echo "usage: $0 [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  -u, --user USER          Git user email (optional, defaults to current user email)"
  echo "  -d, --directory DIR      Directory to scan (optional, defaults to current directory)"
  echo "  -n, --top-n NUM          Display the top N most active repositories (optional, defaults to 10)"
  echo "  -e, --exclude PATTERN    Add a pattern to exclude (can be used multiple times)"
  echo "  -q, --quiet              Display only summary information"
  echo "  -h, --help               Display this help message"
  echo ""
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case "${1}" in
    -u|--user)
      user="${2}"
      shift 2
      ;;
    -d|--directory)
      scan_dir="${2}"
      shift 2
      ;;
    -n|--top-n)
      top_n="${2}"
      shift 2
      ;;
    -e|--exclude)
      # Add to exclusion patterns from command line
      exclude_patterns+=("${2}")
      shift 2
      ;;
    -q|--quiet)
      verbose=false
      shift
      ;;
    -h|--help)
      usage
      ;;
    *)
      echo "Unknown option: ${1}"
      usage
      exit 1
      ;;
  esac
done

# Ensure the scan directory exists.
if [ ! -d "${scan_dir}" ]; then
  echo -e "${red}ERROR: Directory '${scan_dir}' does not exist.${reset}" >&2
  exit 1
fi

# Get absolute path of scan directory.
scan_dir=$(cd "${scan_dir}" && pwd)

# If no user email is provided, use `git config user.email`.
if [ -z "${user}" ]; then
  user=$(git config user.email)
  if [ -z "${user}" ]; then
    echo -e "${red}ERROR: No user email specified and \`git config user.email\` is not set.${reset}" >&2
    echo -e "${red}Please specify an email with --user or configure git.${reset}" >&2
    exit 1
  fi
fi

echo -e "${blue}Scanning directory:${reset}  ${scan_dir}"
echo -e "${blue}Counting commits by:${reset} ${user}"

# Display exclusion patterns if any
if [ ${#exclude_patterns[@]} -gt 0 ]; then
  echo -e "${blue}Excluding patterns:${reset}"
  for pattern in "${exclude_patterns[@]}"; do
    echo "  - ${pattern}"
  done
fi
echo ""

# Initialize variables for totals.
total_repos=0
total_commits=0
repos_with_commits=0
max_commits=0
max_commits_repo=""

# Create temporary files.
repo_data_file=$(mktemp)
results_file=$(mktemp)
filtered_repos=$(mktemp)

# Find all Git repositories.
find "${scan_dir}" -type d -name ".git" > "${repo_data_file}"

# Filter out excluded patterns.
cat "${repo_data_file}" > "${filtered_repos}"
for pattern in "${exclude_patterns[@]}"; do
  if [ -n "${pattern}" ]; then
    grep -v "${pattern}" "${filtered_repos}" > "${filtered_repos}.tmp" || true
    mv "${filtered_repos}.tmp" "${filtered_repos}"
  fi
done

# Process each repository.
while read -r gitdir; do
  repo_dir="${gitdir%/.git}"
  repo_name=$(basename "${repo_dir}")

  # Skip if not a valid Git repository.
  if [ ! -f "${gitdir}/config" ]; then
    continue
  fi

  # Navigate to Git repository directory.
  cd "${repo_dir}" || continue

  # Count commits by the specified user.
  commit_count=$(git log --author="${user}" --oneline | wc -l)

  # Trim whitespace from commit count.
  commit_count=$(echo "${commit_count}" | tr -d '[:space:]')

  # Store result in file (repo_name:commit_count:repo_dir).
  echo "${repo_name}:${commit_count}:${repo_dir}" >> "${results_file}"

  # Update totals.
  ((total_repos++))
  ((total_commits+=commit_count))

  if [ "${commit_count}" -gt 0 ]; then
    ((repos_with_commits++))
  fi

  if [ "${commit_count}" -gt "${max_commits}" ]; then
    max_commits=${commit_count}
    max_commits_repo=${repo_name}
  fi

  # Display repository information if verbose (verbose=true).
  if [ "${verbose}" = true ]; then
    if [ "${commit_count}" -gt 0 ]; then
      echo -e "${green}${repo_name}:${reset} ${commit_count} commits"
    else
      echo -e "${yellow}${repo_name}:${reset} No commits"
    fi
  fi

  # Return to original directory.
  cd - > /dev/null || true
done < "${filtered_repos}"

# Clean up temporary find files.
rm "${repo_data_file}" "${filtered_repos}"

# Sort and display results.
if [ "${total_repos}" -gt 0 ]; then
  echo ""
  echo -e "${blue}Summary:${reset}"
  echo "--------------------------------"
  echo "Total repositories scanned: ${total_repos}"
  echo "Repositories with commits: ${repos_with_commits}"
  echo "Total commits across all repositories: ${total_commits}"

  if [ "${max_commits}" -gt 0 ]; then
    echo -e "Most active repository: ${green}${max_commits_repo}${reset} (${max_commits} commits)"
  fi

  # Create a sorted results file for top N display.
  sorted_file=$(mktemp)

  # Convert stored results to format suitable for sorting.
  while read -r line; do
    repo_name="${line%%:*}"
    rest="${line#*:}"
    commit_count="${rest%%:*}"
    repo_path="${rest#*:}"
    echo "${commit_count} ${repo_name} ${repo_path}" >> "${sorted_file}"
  done < "${results_file}"

  # Sort results
  sort -rn "${sorted_file}" > "${sorted_file}.sorted"
  mv "${sorted_file}.sorted" "${sorted_file}"

  echo ""
  echo -e "${blue}Top ${top_n} repositories by commit count:${reset}"

  # Display top N results.
  head -n "${top_n}" "${sorted_file}" | while read -r line; do
    count=$(echo "${line}" | cut -d' ' -f1 | tr -d '[:space:]')
    repo=$(echo "${line}" | cut -d' ' -f2 | tr -d '[:space:]')
    path=$(echo "${line}" | cut -d' ' -f3- | sed 's/^ *//')

    if [ "${count}" -gt 0 ]; then
      # Show repository name and path if they differ significantly.
      if [[ "${path}" == *"${repo}"* ]]; then
        echo -e "${green}${repo}:${reset} ${count} commits"
      else
        echo -e "${green}${repo} (${path}):${reset} ${count} commits"
      fi
    fi
  done

  # Clean up temporary files.
  rm "${results_file}" "${sorted_file}"
else
  echo "No Git repositories found in $scan_dir."
  rm "${results_file}" 2>/dev/null || true
fi
