#!/usr/bin/env bash
#
# DESCRIPTION
#   Generates a public and private RSA key pair.
#
#   See the man pages for `ssh-keygen` for further details.
#
# USAGE
#   generate-ssh-keys [OPTIONS]
#
# OPTIONS
#   -f FILE       Path to the output keyfile
#   -h, --help    Show this help message
#
# EXAMPLES
#   generate-ssh-keys -f id_rsa

# Colors
red='\033[0;31m'
reset='\033[0m'

# Print usage information.
function usage() {
  echo "usage: $0 [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  -f FILE       Path to the output keyfile"
  echo "  -h, --help    Show this help message"
  echo ""
}

output_keyfile=""

# Parse command line arguments.
while [[ $# -gt 0 ]]; do
  case $1 in
    -f) output_keyfile="$2"; shift 2 ;;
    -h|--help) usage; exit 0 ;;
    -*) echo "Unknown option: $1" >&2; usage; exit 1 ;;
    *) echo "Unknown argument: $1" >&2; usage; exit 1 ;;
  esac
done

if [ -z "${output_keyfile}" ]; then
  echo -e "${red}ERROR: Must specify an output keyfile with -f option.${reset}" >&2
  usage
  exit 1
fi

# Exit if a key pair of the name 'output_keyfile' already exists
if [ -e "${output_keyfile}" ]; then
  echo -e "${red}ERROR: File already exists.${reset}" >&2
  exit 1
fi

# Create a .ssh directory if one does not already exist
if [ ! -d "${HOME}/.ssh" ]; then
  mkdir -p "${HOME}/.ssh"
fi

# Generate an RSA key pair
ssh-keygen -b 2048 -t rsa -f "${HOME}/.ssh/${output_keyfile}" -P ""

# Restrict access to the private key
chmod 400 "${HOME}/.ssh/${output_keyfile}"
